using System;
using System.Globalization;

namespace Cuyahoga.Modules.ECommerce.Service.Translation {

	/// <summary>
	/// Summary description for TranslatorUtils.
	/// </summary>
	public class TranslatorUtils {

		public TranslatorUtils() {
		}

		public static ITextTranslator GetTextTranslator(Type type, string cultureCode) {
			ITextTranslatorFactory translatorFactory = new NonCompiledResourceFileTextSource();
			return translatorFactory.GetTranslator(GetResourceType(type), cultureCode);
		}

		/// <summary>
		/// returns the type used for resource lookups.
		/// Ignores classes generated by ASP.NET
		/// </summary>
		/// <param name="type">A guess at the current type</param>
		/// <returns></returns>
		public static Type GetResourceType(Type type) {

			//Want the code behind, not the ascx
			if (type.FullName.EndsWith("_ascx")) {
				return type.BaseType;
			}

			return type;
		}

		/// <summary>
		/// Gets a county-specific culture for the supplied language
		/// </summary>
		/// <param name="suggestedCultureCode">A suggestion of the final culture code</param>
		/// <returns></returns>
		public static string GetSpecificCultureCode(string suggestedCultureCode) {

			CultureInfo info = new CultureInfo(suggestedCultureCode);

			if (!info.IsNeutralCulture) {
				return info.Name;
			} else {

				//try de-DE or something
				if (suggestedCultureCode.Length == 2) {
					try {
						info = new CultureInfo(suggestedCultureCode.ToLower() + "-" + suggestedCultureCode.ToUpper());
						if (!info.IsNeutralCulture) {
							return info.Name;
						}
					} catch {}
				}

				//Get first non-neutral culture
				CultureInfo[] codeArray = CultureInfo.GetCultures(CultureTypes.SpecificCultures);
						
				foreach (CultureInfo code in codeArray) {
					if (!code.IsNeutralCulture && code.Name.StartsWith(suggestedCultureCode)) {
						return code.Name;
					}
				}
			}

			return System.Threading.Thread.CurrentThread.CurrentUICulture.Name;
		}
	}
}