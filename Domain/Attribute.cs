using System;
using System.Collections;

namespace Cuyahoga.Modules.ECommerce.Domain {
    /// <summary>
    ///	Generated by MyGeneration using the Serdar's NHibernate Object Mapping 1.1 template (based on Gustavo's) - serdar@argelab.net
    /// </summary>
    [Serializable]
    public class Attribute {

        #region Private Members
        private bool _isChanged;
        private bool _isDeleted;
        private int _typeID;
        private long _attributeid;
        private string _attributereference;
        private string _attributedescription;
        private bool? _isdisplayable;
        private string _baseunit;
        private IList _options;
        private AttributeType _attributeType;


        #endregion

        #region Default ( Empty ) Class Constuctor
        /// <summary>
        /// default constructor
        /// </summary>
        public Attribute() {
            _typeID = 0;

            _attributeid = 0;
            _attributereference = null;
            _attributedescription = null;
            _isdisplayable = null;
            _baseunit = null;

        }
        #endregion // End of Default ( Empty ) Class Constuctor

        #region Internal Accessors for NHibernate

        /// <summary>
        /// 
        /// </summary>
        internal virtual long _Attributeid {
            get { return _attributeid; }
            set { _attributeid = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        internal virtual string _AttributeReference {
            get { return _attributereference; }
            set { _attributereference = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        internal virtual string _AttributeDescription {
            get { return _attributedescription; }
            set { _attributedescription = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        internal virtual bool? _IsDisplayable {
            get { return _isdisplayable; }
            set { _isdisplayable = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        internal virtual string _BaseUnit {
            get { return _baseunit; }
            set { _baseunit = value; }
        }

        internal virtual int _TypeID {
            get { return _typeID; }
            set { _typeID = value; }
        }

        #endregion // Internal Accessors for NHibernate

        #region Public Properties

        public virtual AttributeType AttributeType {
            get { return _attributeType; }
            set { _attributeType = value; }
        }

        public virtual IList Options {
            get { return _options; }
            set { _options = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public virtual long Attributeid {
            get { return _attributeid; }
            set { _isChanged |= (_attributeid != value); _attributeid = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public virtual string AttributeReference {
            get { return _attributereference; }
            set {
                if (value != null)
                    if (value.Length > 50)
                        throw new ArgumentOutOfRangeException("Invalid value for AttributeReference", value, value.ToString());

                _isChanged |= (_attributereference != value); _attributereference = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public virtual string AttributeDescription {
            get { return _attributedescription; }
            set {
                if (value != null)
                    if (value.Length > 128)
                        throw new ArgumentOutOfRangeException("Invalid value for AtrributeDescription", value, value.ToString());

                _isChanged |= (_attributedescription != value); _attributedescription = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public virtual bool? IsDisplayable {
            get { return _isdisplayable; }
            set { _isChanged |= (_isdisplayable != value); _isdisplayable = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public virtual string BaseUnit {
            get { return _baseunit; }
            set {
                if (value != null)
                    if (value.Length > 50)
                        throw new ArgumentOutOfRangeException("Invalid value for BaseUnit", value, value.ToString());

                _isChanged |= (_baseunit != value); _baseunit = value;
            }
        }

        public virtual int TypeID {
            get { return _typeID; }
            set { _isChanged |= (_typeID != value); _typeID = value; }
        }

        /// <summary>
        /// Returns whether or not the object has changed it's values.
        /// </summary>
        public virtual bool IsChanged {
            get { return _isChanged; }
        }

        /// <summary>
        /// Returns whether or not the object has changed it's values.
        /// </summary>
        public virtual bool IsDeleted {
            get { return _isDeleted; }
        }

        #endregion

        #region Public Functions

        /// <summary>
        /// mark the item as deleted
        /// </summary>
        public virtual void MarkAsDeleted() {
            _isDeleted = true;
            _isChanged = true;
        }


        #endregion

        #region Equals And HashCode Overrides
        /// <summary>
        /// local implementation of Equals based on unique value members
        /// </summary>
        public override bool Equals(object obj) {
            if (this == obj) return true;
            if ((obj == null) || (obj.GetType() != this.GetType())) return false;
            Attribute castObj = (Attribute)obj;
            return (castObj != null) &&
                (this._attributeid == castObj.Attributeid);
        }

        /// <summary>
        /// local implementation of GetHashCode based on unique value members
        /// </summary>
        public override int GetHashCode() {

            int hash = 57;
            hash = 27 * hash * _attributeid.GetHashCode();
            return hash;
        }
        #endregion
    }
}