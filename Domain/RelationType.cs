/*

insert license info here

*/

using System;

namespace Cuyahoga.Modules.ECommerce.Domain
{
	/// <summary>
	///	Generated by MyGeneration using the Serdar's NHibernate Object Mapping 1.1 template (based on Gustavo's) - serdar@argelab.net
	/// </summary>
	[Serializable]
	public class RelationType 
	{
		#region Private Members
		private bool _isChanged;
		private bool _isDeleted;
		private short _relationtypeid; 
		private string _relationshipname; 
		private string _relationshipdescription; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public RelationType()
		{
			_relationtypeid = 0; 
			_relationshipname = null; 
			_relationshipdescription = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Internal Accessors for NHibernate
		
		/// <summary>
		/// 
		/// </summary>
		internal virtual short _RelationTypeid
		{
			get { return _relationtypeid; }
			set { _relationtypeid = value; }
		}
		
		/// <summary>
		/// 
		/// </summary>
		internal virtual string _RelationshipName
		{
			get { return _relationshipname; }
			set { _relationshipname = value; }
		}
		
		/// <summary>
		/// 
		/// </summary>
		internal virtual string _RelationshipDescription
		{
			get { return _relationshipdescription; }
			set { _relationshipdescription = value; }
		}
		
		#endregion // Internal Accessors for NHibernate 

		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>		
		public virtual short RelationTypeid
		{
			get { return _relationtypeid; }
			set { _isChanged |= (_relationtypeid != value); _relationtypeid = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public virtual string RelationshipName
		{
			get { return _relationshipname; }
			set	
			{
				if ( value != null )
					if( value.Length > 128)
						throw new ArgumentOutOfRangeException("Invalid value for RelationshipName", value, value.ToString());
				
				_isChanged |= (_relationshipname != value); _relationshipname = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public virtual string RelationshipDescription
		{
			get { return _relationshipdescription; }
			set	
			{
				if ( value != null )
					if( value.Length > 1024)
						throw new ArgumentOutOfRangeException("Invalid value for RelationshipDescription", value, value.ToString());
				
				_isChanged |= (_relationshipdescription != value); _relationshipdescription = value;
			}
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public virtual bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public virtual bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public virtual void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		
		#endregion
		
		
		#region Equals And HashCode Overrides
		/// <summary>
		/// local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals( object obj )
		{
			if( this == obj ) return true;
			if( ( obj == null ) || ( obj.GetType() != this.GetType() ) ) return false;
			RelationType castObj = (RelationType)obj; 
			return ( castObj != null ) &&
				( this._relationtypeid == castObj.RelationTypeid );
		}
		
		/// <summary>
		/// local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			
			int hash = 57; 
			hash = 27 * hash * _relationtypeid.GetHashCode();
			return hash; 
		}
		#endregion
		
	}
}
